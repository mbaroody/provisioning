/*!
 * AMBOSS Anki Add-on
 * 
 * Copyright (C) 2019-2022 AMBOSS MD Inc. <https://www.amboss.com/us>
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version, with the additions
 * listed at the end of the license file that accompanied this program.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 * 
 */
var ambossAddon="object"==typeof ambossAddon?ambossAddon:{};ambossAddon.analytics=function(Q){var U={};function F(B){if(U[B])return U[B].exports;var s=U[B]={i:B,l:!1,exports:{}};return Q[B].call(s.exports,s,s.exports,F),s.l=!0,s.exports}return F.m=Q,F.c=U,F.d=function(Q,U,B){F.o(Q,U)||Object.defineProperty(Q,U,{enumerable:!0,get:B})},F.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},F.t=function(Q,U){if(1&U&&(Q=F(Q)),8&U)return Q;if(4&U&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var B=Object.create(null);if(F.r(B),Object.defineProperty(B,"default",{enumerable:!0,value:Q}),2&U&&"string"!=typeof Q)for(var s in Q)F.d(B,s,function(U){return Q[U]}.bind(null,s));return B},F.n=function(Q){var U=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return F.d(U,"a",U),U},F.o=function(Q,U){return Object.prototype.hasOwnProperty.call(Q,U)},F.p="",F(F.s=2)}({2:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"track\", function() { return track; });\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n// disable cookies\ndocument.__defineGetter__('cookie', function () {\n  return '';\n});\nconst warnCopy = console.warn;\nconsole.warn = function log() {\n  if (arguments && arguments[0] && typeof arguments[0] === 'string' && arguments[0].match(/cannot set property cookie of|localStorage may be/gi)) {\n    return;\n  }\n  if (arguments) {\n    warnCopy.apply(console, Array.prototype.slice.call(arguments));\n  }\n};\n!function () {\n  var analytics = window.analytics = window.analytics || [];\n  if (!analytics.initialize && !analytics.invoked) {\n    analytics.invoked = !0;\n    analytics.methods = ['reset', 'setAnonymousId', 'identify', 'track', 'page'];\n    analytics.factory = function (t) {\n      return function () {\n        var e = Array.prototype.slice.call(arguments);\n        e.unshift(t);\n        analytics.push(e);\n        return analytics;\n      };\n    };\n    for (var t = 0; t < analytics.methods.length; t++) {\n      var e = analytics.methods[t];\n      analytics[e] = analytics.factory(e);\n    }\n    analytics.load = function (token, options, endpoint) {\n      var n = document.createElement('script');\n      n.type = 'text/javascript';\n      n.async = !0;\n      n.src = endpoint + token + '/a.min.js';\n      var a = document.getElementsByTagName('script')[0];\n      a.parentNode.insertBefore(n, a);\n      analytics._loadOptions = options;\n    };\n    analytics.SNIPPET_VERSION = '4.1.0';\n    analytics.load(\"JabXayKea69oVRQrDghBRiGJ3g7pdHdP\", {\n      integrations: {\n        All: false,\n        'Segment.io': true\n      }\n    }, \"https://www.amboss.com/us/api/sprx/cdn/\");\n  }\n}();\nconst ambossAnkiVersion = () => {\n  return new Promise(resolve => {\n    pycmd('amboss:version:ankiVersion', result => {\n      resolve(result || 'unknown');\n    });\n  });\n};\nconst ambossAddonVersion = () => {\n  return new Promise(resolve => {\n    pycmd('amboss:version:addonVersion', result => {\n      resolve(result || 'unknown');\n    });\n  });\n};\nconst ambossAnonId = () => {\n  return new Promise(resolve => {\n    pycmd('amboss:profile:anonId', result => {\n      resolve(result || null);\n    });\n  });\n};\nconst ambossUserId = () => {\n  return new Promise(resolve => {\n    pycmd('amboss:profile:userId', result => {\n      resolve(result || null);\n    });\n  });\n};\nconst ambossContextOptions = () => {\n  return new Promise(resolve => {\n    Promise.all([ambossAnkiVersion(), ambossAddonVersion(), ambossAnonId(), ambossUserId()]).then(values => {\n      const [ankiVersion, addonVersion, anonId, userId] = values;\n      const options = _objectSpread(_objectSpread(_objectSpread({}, anonId ? {\n        anonymousId: anonId\n      } : {}), userId ? {\n        userId: userId\n      } : {}), {}, {\n        context: {\n          app: {\n            name: 'anki-addon',\n            version: addonVersion,\n            hostVersion: ankiVersion,\n            stage: \"production\",\n            ambossLanguage: \"en\",\n            channel: \"download\"\n          }\n        }\n      });\n      resolve(options);\n    });\n  });\n};\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nconst track = (name, properties = {}) => {\n  if (analytics) {\n    Promise.resolve(ambossContextOptions()).then((contextOptions = {}) => {\n      const {\n        userId,\n        anonymousId\n      } = contextOptions;\n      const analyticsUser = typeof analytics.user === 'function' ? analytics.user() : {};\n      const analyticsId = typeof analyticsUser.id === 'function' && analyticsUser.id();\n      const analyticsAnonymousId = typeof analyticsUser.anonymousId === 'function' && analyticsUser.anonymousId();\n      const reset = typeof analytics.reset === 'function' && analytics.reset;\n      const identify = typeof analytics.identify === 'function' && analytics.identify;\n      const setAnonymousId = typeof analytics.setAnonymousId === 'function' && analytics.setAnonymousId;\n      if (!userId && analyticsId && reset) {\n        reset();\n      } else if (userId && userId !== analyticsId && identify) {\n        identify(userId);\n      }\n      if (anonymousId && anonymousId !== analyticsAnonymousId && setAnonymousId) {\n        setAnonymousId(anonymousId);\n      }\n      analytics.track(`anki-addon.${name}`, properties, contextOptions);\n      if (false) {}\n    });\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n")}});